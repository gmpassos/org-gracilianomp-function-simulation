apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'jacoco'
apply plugin: 'eclipse-wtp'
apply plugin: 'application'
apply plugin: 'project-report'
apply from: 'gradle/jacoco-full-coverage.gradle'

mainClassName = "org.gracilianomp.function.simulation.FunctionSimulation"

applicationDefaultJvmArgs = [
        "-server",
        "-Xms2000m",
        "-Xmx10000m",
        "-XX:+UseG1GC",
        "-XX:MaxGCPauseMillis=5000",
        "-XX:-UseGCOverheadLimit",
        "-XX:+UseCompressedOops",
        "-XX:CompileThreshold=500",
        "-XX:+AggressiveOpts",
        "-XX:+UseFastAccessorMethods"
]

sourceCompatibility = 1.8
[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

task wrapper(type: Wrapper) {
    gradleVersion = '4.9'
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.6'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.18.3'
    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/it/java')

            integrationTest.runtimeClasspath += integrationTest.output
        }
        resources.srcDir file('src/it/resources')
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

task integrationTest(type: Test) {
    group 'Verification'
    description 'Runs the integration tests.'
    testClassesDirs += sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.withType(Test) {
    // This exists to separate unit test reporting from integration tests
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

jacoco {
    reportsDir = file("$buildDir/reports/jacoco")
}

task jacocoIntegrationTestReport(type: JacocoReport) {
    sourceSets sourceSets.integrationTest
    executionData integrationTest
}

eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = true
        plusConfigurations.add configurations.integrationTestCompile
        plusConfigurations.add configurations.integrationTestRuntime
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
        testSourceDirs += sourceSets.integrationTest.java.srcDirs
        testSourceDirs += sourceSets.integrationTest.resources.srcDirs
        scopes.TEST.plus.add(configurations.integrationTestCompileClasspath)
    }
}

jar {
    manifest {
        attributes(
                'Implementation-Title': 'Function Simulation - By Graciliano M. P.'
        )
    }
}